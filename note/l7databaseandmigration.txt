=>Migration

.env 

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=exerciseone
DB_USERNAME=root
DB_PASSWORD=


mysql -u root -p

status

CREATE DATABASE exerciseone;

SHOW DATABASES;




database > migrations


=>tables to update db server
php artisan migrate

=>Create New Table
php artisan make:migration create_students_table
php artisan make:migration create_workers_table --create="workers"

Schema::create('students', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('phonenumber');
            $table->timestamps();
        });

php artisan migrate









=>Avaliable Column Types

$table->id();
$table->bigIncrements('id');
$table->increments('id');
$table->bigInteger('id');
$table->unsignedInteger('id'); // only positive integer
$table->unsignedBigInteger('id'); // only positive integer
$table->tinyInteger('id'); 
$table->smallInteger('votes'); 
$table->binary('photo');
$table->boolean('confirmed');
$table->char('name');
$table->string('name',100);
$table->text('description');
$table->tinytext('note');
$table->mediumtext('description');
$table->longText('post');
$table->time('bookingtime');
$table->date('created_at');
$table->year('birthyear');
$table->timestamps();   //system auto
$table->timestamp();  //custom
$table->decimal('amount',precision=8,scale=2);
$table->float('measure',precision=8,scale=2);
$table->enum('payment',['visa','mpu','cod','kpay','wave']);
$table->json('multiphones');



=>List all files from database > migration files
php artisan migrate:status


=>Undo migration
php artisan migrate:rollback


php artisan make:migration create_staffs_table --create="staffs"
php artisan make:migration create_employees_table --create="employees"


=>Undo migration by step=tablecount (selected table count to local)
php artisan migrate:rollback --step=2


=>Check the list of undo before rollback table list (**)
php artisan migrate:rollback --pretend


=>Delete all tables (only make auto rollback)
php artisan migrate:reset

php artisan make:migration create_shoppers_table --create="shoppers"


=>Delete all datas (make both auto rollback & auto migrate)
php artisan migrate:refresh



=>Delete all datas (make both auto rollback & auto migrate / selected table count to local)
php artisan migrate:refresh --step=2


=>Add New Columns
php artisan make:migration add_city_to_shoppers_table --table="shoppers"

$table->string('city'); //to add_city_to_shoppers_table
php artisan migrate


=>Sort Column
php artisan migrate:rollback --pretend
php artisan migrate:rollback 


$table->string('city')->after('phonenumber'); //to add_city_to_shoppers_table



--
=>Up(work when made migrate) Vs Down(work when made rollback)

php artisan make:migration add_city_to_employees_table --table="employees"
$table->string('city')->after('phonenumber');

php artisan make:migration add_city_to_staffs_table --table="staffs"
$table->string('city')->after('phonenumber');


=>down
$table->dropColumn('city');

php artisan migrate
php artisan migrate:status
php artisan migrate:rollback --pretend
php artisan migrate:rollback
php artisan migrate


=>Drop Columns
php artisan make:migration remove_id_to_students_table --table=students
=>up
$table->dropColumn('id');
php artisan migrate
php artisan migrate:status
php artisan migrate:rollback --pretend
php artisan migrate:rollback
php artisan migrate


php artisan make:migration remove_id_to_workers_table --table=workers
=>up
$table->dropColumn(['id','phonenumber']);
=>down
$table->id();
$table->string('phonenumber')->after('fullname');

php artisan migrate
php artisan migrate:status
php artisan migrate:rollback --pretend
php artisan migrate:rollback
php artisan migrate


php artisan make:migration remove_id_to_staffs_table --table=staffs
=>up

Note:: hasColumn(table,columnname)
if(Schema::hasColumn('staffs','id')){
    Schema::table('workers', function (Blueprint $table) {
        $table->dropColumn('id');
    });
}


php artisan migrate
php artisan migrate:status
php artisan migrate:rollback --pretend
php artisan migrate:rollback
php artisan migrate


php artisan migrate:rollback --pretend
php artisan migrate:rollback

=>down
$table->id()->first();
php artisan migrate




=>Rename Columns renameColumns(from,to)
php artisan make:migration rename_students_column --table=students
=>up
$table->renameColumn('phonenumber','phone');
$table->renameColumn('address','city');
=>down
$table->renameColumn('phone','phonenumber');
$table->renameColumn('city','address');

php artisan migrate
php artisan migrate:status
php artisan migrate:rollback --pretend
php artisan migrate:rollback
php artisan migrate


=>Rename Table rename(from,to)
php artisan make:migration rename_employees_to_customers_table --table=employees
=>up
Schema::rename('employees','customers');
=>down
Schema::rename('customers','employees');

php artisan migrate
php artisan migrate:status
php artisan migrate:rollback --pretend
php artisan migrate:rollback
php artisan migrate


=>Default Value

php artisan make:migration create_books_table --create="books"

Schema::create('books', function (Blueprint $table) {
            $table->increments('id');
            $table->string('title');
            $table->tinyInteger('status')->default('1');
            $table->enum('copyright',['0','1'])->default('0');
            $table->timestamp('created_at')->default(DB::raw('CURRENT_TIMESTAMP')); //timestamp not include s
            $table->timestamp('updated_at')->default(DB::raw('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP')); //timestamp not include s
        });


php artisan make:migration create_profiles_table --create="profiles"

Schema::create('profiles', function (Blueprint $table) {
            $table->increments('id');
            $table->string('givenname',100);
            $table->string('familyname',100);
            $table->enum('gender',array('male','female','unisex'))->default('female');
            $table->text('bio');
            $table->unsignedBigInteger('user_id');
            $table->timestamp('created_at')->useCurrent();
            $table->timestamp('updated_at')->nullable()->useCurrentOnUpdate();
        });




=>Creating Indexes

$table->string('email')->unique();

php artisan make:migration create_authors_table --create="authors"
php artisan make:migration create_types_table --create="types"
php artisan make:migration create_posts_table --create="posts"


=Foregin Key Constraints

*Method 1
$table->unsignedBigInteger('user_id');
$table()->foreign('users_id')->references('id')->on('users');

*Method 2
$table()->foreignId('user_id')->constrained('users');


Schema::create('authors', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->timestamps();
        });


Schema::create('types', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->timestamps();
        });


Schema::create('posts', function (Blueprint $table) {
            $table->id();
            $table->string('title')->unique();
            $table->text('description');

            $table->unsignedBigInteger('user_id');
            $table->foreign('user_id')->references('id')->on('users')->onUpdate('cascade')->onDelete('cascade');

            $table->foreignId('author_id')->constrained('authors')->onUpdate('cascade')->onDelete('cascade');

            $table->year('year');

            $table->unsignedBigInteger('type_id');
            $table->foreign('type_id')->references('id')->on('types')->onUpdate('cascade')->onDelete('cascade');

            $table->timestamps();
        });


=>Data Insert From Route

in web.php
// use Illuminate/Support/Facades/DB;
Route::get('types/insert',function(){
    DB::insert("INSERT INTO types(name) value(?)",["book"]);
    return "Successfully Inserted";
});

Route::get('types/read',function(){
    $results = DB::select("SELECT * FROM types");
    return $results;
});

Route::get('types/read',function(){
    $results = DB::select("SELECT * FROM types");
    return var_dump($results);
});

Route::get('types/read',function(){
    $results = DB::select("SELECT * FROM types");
    
    foreach($results as $type){
        echo $type->name ."<br/>";
    }
});

Route::get('types/read',function(){
    $result = DB::select("SELECT * FROM types WHERE id=?",[3]);
    return $result;
});



===16/7/2023

Route::get('students/insert',function(){
    DB::insert("INSERT INTO students(name,phonenumber,address) value (?,?,?)",['aung aung','111111','yangon']);
    return "Insert Successfully";
});

Route::get('students/update',function(){
    DB::update("UPDATE types SET name='pdf' WHERE id=?",[2]);
    return "Update Successfully";
});

Route::get('shoppers/update',function(){
    DB::update("UPDATE shoppers SET fullname=?,phonenumber=?,city=? WHERE id=?",['kyaw kyaw','22222','bago',2]);
    return "Update Successfully";
});


Route::get('shoppers/delete',function(){
    // DB::delete("DELETE FROM shoppers WHERE id=?",[3]);
    DB::delete("DELETE FROM shoppers WHERE id=?",[2]);
    return "Delete Successfully";
});

=CRUD
DB::insert
DB::select
DB::update
DB::delete


=>DB::table('')->get()
=>DB::table('')->select()->get()
=>DB::table('')->selectRaw()->get()


Route::get('shoppers/read',function(){

    // $results = DB::select("SELECT * FROM shoppers");
    // return $results;

    // $results = DB::select("SELECT * FROM shoppers WHERE id=?",[6]);
    // return $results;

    $results = DB::table('shoppers')->get();
    return $results;

    // =>select(columns)
    // =>selectRaw(expression)


    // $results = DB::table('shoppers')->select('*')->get();
    $results = DB::table('shoppers')->selectRaw('*')->get();
    return $results;
});